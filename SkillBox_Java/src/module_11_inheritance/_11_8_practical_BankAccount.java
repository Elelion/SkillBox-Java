package module_11_inheritance;

import java.time.LocalDate;
import java.time.Month;

public class _11_8_practical_BankAccount {
    /**
     * TODO: Задание 11.8 - 1
     * Цель
     * • Освоить на практике наследование классов.
     *
     * - В проекте найдите класс BankAccount и унаследованные от него классы
     * CardAccount и DepositAccount.
     * - Реализуйте методы классов, при необходимости переопределите методы
     * в наследниках так, чтобы выполнялись условия пополнения и снятия:
     *      • BankAccount — пополнение и списание происходит без комиссии.
     *      Если передать в метод пополнения отрицательное значение, сумма
     *      на счёте не должна измениться. При попытке снять большую сумму,
     *      чем есть на счёте, сумма не списывается со счёта, сумма на счёте
     *      не изменяется.
     *      • CardAccount — карточный счёт, в дополнение к условиям
     *      BankAccount — при снятии денег должна взиматься комиссия 1% от
     *      суммы списания. Пример: при попытке снять со счёта 100 рублей должен
     *      списаться 101 рубль.
     *      • DepositAccount — депозитный расчётный счёт, в дополнение к
     *      условиям BankAccount — нельзя снимать деньги в течение одного
     *      месяца после последнего пополнения. Переменную, в которой хранится
     *      дата последнего внесения, назовите lastIncome. Тип переменной
     *      используйте Calendar или LocalDate.
     *      • Запустите в проекте тесты и убедитесь в том, что они выполняются
     *      успешно. Если тесты не выполняются и выдают информацию об ошибках,
     *      постарайтесь самостоятельно исправить эти недочёты и добиться
     *      успешного выполнения тестов перед отправкой результатов куратору.
     */

    /**
     * TODO: Задание 11.8 - 2
     * Цель
     * • Научиться выбирать подходящие модификаторы доступа.
     *
     * Что нужно сделать
     * • Используйте код предыдущего задания. Установите в коде проекта
     * подходящие модификаторы доступа у методов и переменных классов
     * BankAccount, CardAccount и DepositAccount.
     */

    /* ----------------------------------------------------------------- */

    private double deposit = 0;

    /**/

    public double getAmount() {
        //TODO: реализуйте метод и удалите todo
        // верните значение количества денег не счету
        return deposit;
    }

    public void put(double amountToPut) {
        //TODO: реализуйте метод и удалите todo
        // метод зачисляет деньги на счет

        if (amountToPut > 0) {
            deposit += amountToPut;
        } else {
            System.out.println("Введена отрицательная сумма");
        }
    }

    public void take(double amountToTake) {
        //TODO: реализуйте метод и удалите todo
        // метод списывает деньги со счета

        if (amountToTake <= deposit) {
            deposit -= amountToTake;
        } else {
            System.out.println("Указанная сумма превышает баланс");
        }
    }
}

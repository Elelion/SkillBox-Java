package module_17_multithreading._17_20_lecture_ForkJoinPool_RecursiveTask;

import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.ForkJoinPool;

public class ForkJoinPool_RecursiveTask {
    public ForkJoinPool_RecursiveTask() {
        /**
         * • ForkJoinPool - это механизм для параллельного выполнения задач.
         * Он используется для ускорения работы приложений, которые могут
         * быть разбиты на более мелкие подзадачи, которые можно выполнять
         * параллельно.
         *
         * Затем эти подзадачи выполняются параллельно в рамках пула потоков,
         * что позволяет ускорить выполнение всей задачи. Он также автоматически
         * балансирует нагрузку между потоками, чтобы оптимизировать
         * производительность выполнения задач.
         *
         *
         * • RecursiveTask - абстрактный класс, который представляет задачу,
         * которая может быть выполнена параллельно с помощью механизма
         * ForkJoinPool. Он расширяет класс RecursiveAction и предоставляет
         * возможность возвращать результат выполнения задачи.
         *
         * Для использования RecursiveTask необходимо реализовать метод
         * compute(), который разбивает исходную задачу на более мелкие
         * подзадачи и выполняет их параллельно. Результаты подзадач
         * объединяются, чтобы получить окончательный результат выполнения задачи.
         *
         * В отличие от RecursiveAction, RecursiveTask возвращает значение,
         * которое может быть любым типом данных. Это значение возвращается
         * методом join() после выполнения задачи. Если задача не завершается,
         * метод join() блокирует текущий поток до завершения задачи.
         *
         * RecursiveTask часто используется для выполнения сложных вычислений,
         * которые могут быть разбиты на более мелкие подзадачи, которые можно
         * выполнять параллельно.
         */

        Node root = new MyNode(10, Arrays.asList(
            new MyNode(5, Collections.emptyList()),
            new MyNode(15, Collections.emptyList())
        ));

        Long sum = new ForkJoinPool().invoke(new NodeValueSumCalc(root));
        System.out.println(sum);
    }
}

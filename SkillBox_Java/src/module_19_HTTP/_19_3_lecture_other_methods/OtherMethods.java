package module_19_HTTP._19_3_lecture_other_methods;

public class OtherMethods {
    public OtherMethods() {
        /*
        PUT - предназначен для создания или обновления какого либо ресурса
        по конкретному URL. Считается не безопасным.

        При выполнении запроса с методом PUT, клиент отправляет данные,
        которые заменяют текущее состояние ресурса на сервере. Если ресурс
        с указанным идентификатором уже существует, то он будет обновлен, а
        если не существует, то создан. Метод PUT широко используется для
        обновления или создания ресурсов в RESTful API.

        Пример:
        PUT /api/user/46283 HTTP/1.1
        {
            "name": "Dima Petrov",
            "email": "test@example.com",
            "active": true,
            "password": "test555test"
        }
         */

        /*
        DELETE - предназначен для удаления какого либо ресурса по конкретному URL.
        Считается не безопасным.

        При выполнении запроса с методом DELETE, клиент отправляет запрос на
        удаление ресурса с указанным идентификатором. Если ресурс существует, то
        он будет удален, а сервер возвращает успешный статус ответа.
        Метод DELETE используется для удаления данных или ресурсов в RESTful API.

        Пример:
        DELETE /news/4637 HTTP/1.1
         */

        /*
        PATCH - предназначен для частичного обновления какого либо ресурса.
        Считается не безопасным.

        В отличие от метода PUT, который полностью заменяет ресурс новыми
        данными, метод PATCH позволяет обновить только определенные части
        ресурса. При выполнении запроса с методом PATCH, клиент отправляет
        инструкции об обновлении ресурса, а сервер применяет эти изменения к
        соответствующему ресурсу. Метод PATCH широко используется в RESTful API
        для обновления отдельных полей или свойств ресурса без необходимости
        отправлять все данные снова.

        Пример:
        PATCH /api/product/15162 HTTP/1.1
         */

        /*
        HEAD - предназначен для получения заголовков по указанному URL.
        Аналогично GET, но без тела ответа.
        Считается безопасным.

        При выполнении запроса с методом HEAD, сервер возвращает только заголовки
        ответа, включая информацию о размере, типе контента и дате последнего
        изменения ресурса. Метод HEAD полезен, когда клиенту нужна только
        информация о ресурсе, а само содержимое не требуется, что позволяет
        сэкономить пропускную способность сети и уменьшить нагрузку на сервер.

        Пример:
        HEAD /api/download/5e8fda225 HTTP/1.1
         */

        /*
        OPTIONS - предназначен для получения информации о параметрах взаимодействия
        с сервером или с конкретным ресурсом.
        Считается безопасным.

        При выполнении запроса с методом OPTIONS, сервер возвращает
        информацию о поддерживаемых методах, заголовках, форматах контента
        и других параметрах, связанных с ресурсом. Метод OPTIONS позволяет клиенту
        и серверу взаимодействовать для определения возможностей и настроек перед
        отправкой конкретного запроса.

        Пример:
        OPTIONS /api/lead HTTP/1.1
         */

        /*
        TRACE - предназначен для получения клиентом запроса, который в итоге
        дошел до сервера.

        При выполнении запроса с методом TRACE, сервер возвращает весь полученный
        запрос обратно клиенту. Это позволяет клиенту проследить, как его
        запрос проходит через промежуточные серверы, и проверить, какие
        изменения происходят с запросом на каждом этапе. Метод TRACE полезен
        для анализа и проверки работы прокси-серверов и кэширующих серверов.
         */

        /*
       CONNECT - предназначен для создания двустороннего соединения(туннеля)
       с сервером. Используется для создания защищенных(зашифрованных) соединений
       клиента с сервером через прокси-сервер(а).

       Он обычно применяется в случае использования HTTPS прокси или для
       установки туннеля для защищенной коммуникации. Метод CONNECT позволяет
       клиенту установить двустороннее соединение с сервером, чтобы прокси-сервер
       мог пересылать данные между клиентом и сервером без их анализа или изменения.
         */
    }
}
